{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// Original effect by Kjetil Midtgarden Golid\n// https://github.com/kgolid/p5ycho/blob/master/topology/sketch.js\n\nimport P5Base, { VANTA } from './_p5Base.js';\nimport { color2Rgb } from './helpers.js';\nlet p5 = typeof window == 'object' && window.p5;\nclass Effect extends P5Base {\n  static initClass() {\n    this.prototype.p5 = true;\n    this.prototype.defaultOptions = {\n      color: 0x89964e,\n      backgroundColor: 0x002222\n    };\n  }\n  constructor(userOptions) {\n    p5 = userOptions.p5 || p5;\n    super(userOptions);\n  }\n  onInit() {\n    const t = this;\n    let sketch = function (p) {\n      let width = t.width;\n      let height = t.height;\n      let offset = 100;\n      let flow_cell_size = 10;\n      let noise_size = 0.003;\n      let noise_radius = 0.1;\n      let flow_width = (width + offset * 2) / flow_cell_size;\n      let flow_height = (height + offset * 2) / flow_cell_size;\n      let noise_grid = [];\n      let flow_grid = [];\n      let number_of_particles = 4500;\n      let particles = [];\n      let tick = 0;\n      p.setup = function () {\n        t.initP5(p); // sets bg too\n        p.smooth();\n        p.noStroke();\n        //p.blendMode(p.OVERLAY)\n\n        init_particles();\n        init_flow();\n      };\n      p.draw = function () {\n        p.translate(-offset, -offset);\n        //display_flow()\n        update_particles();\n        display_particles();\n        tick += 0.002;\n      };\n      function init_particles() {\n        for (let i = 0; i < number_of_particles; i++) {\n          let r = p.random(p.width + 2 * offset);\n          let q = p.random(p.height + 2 * offset);\n          particles.push({\n            prev: p.createVector(r, q),\n            pos: p.createVector(r, q),\n            vel: p.createVector(0, 0),\n            acc: p.createVector(0, 0),\n            col: p.random(255),\n            seed: i\n          });\n        }\n      }\n      function update_particles() {\n        for (let i = 0; i < number_of_particles; i++) {\n          let prt = particles[i];\n          let flow = get_flow(prt.pos.x, prt.pos.y);\n          prt.prev.x = prt.pos.x;\n          prt.prev.y = prt.pos.y;\n          prt.pos.x = mod(prt.pos.x + prt.vel.x, p.width + 2 * offset);\n          prt.pos.y = mod(prt.pos.y + prt.vel.y, p.height + 2 * offset);\n          prt.vel.add(prt.acc).normalize().mult(2.2);\n\n          //prt.acc = p5.Vector.fromAngle(p.noise(prt.seed * 10, tick) * p.TAU).mult(0.01)\n          prt.acc = p.createVector(0, 0);\n          prt.acc.add(flow).mult(3);\n        }\n      }\n      function init_flow() {\n        for (let i = 0; i < flow_height; i++) {\n          let row = [];\n          for (let j = 0; j < flow_width; j++) {\n            row.push(calculate_flow(j * noise_size, i * noise_size, noise_radius));\n          }\n          flow_grid.push(row);\n        }\n      }\n      function calculate_flow(x, y, r) {\n        //console.log(x,y)\n        let high_val = 0;\n        let low_val = 1;\n        let high_pos = p.createVector(0, 0);\n        let low_pos = p.createVector(0, 0);\n        for (let i = 0; i < 100; i++) {\n          let angle = i / 100 * p.TAU;\n          let pos = p.createVector(x + p.cos(angle) * r, y + p.sin(angle) * r);\n          let val = p.noise(pos.x, pos.y);\n          if (val > high_val) {\n            high_val = val;\n            high_pos.x = pos.x;\n            high_pos.y = pos.y;\n          }\n          if (val < low_val) {\n            low_val = val;\n            low_pos.x = pos.x;\n            low_pos.y = pos.y;\n          }\n        }\n        let flow_angle = p.createVector(low_pos.x - high_pos.x, low_pos.y - high_pos.y);\n        flow_angle.normalize().mult(high_val - low_val);\n        return flow_angle;\n      }\n      function get_flow(xpos, ypos) {\n        xpos = p.constrain(xpos, 0, p.width + offset * 2);\n        ypos = p.constrain(ypos, 0, p.height + offset * 2);\n        return flow_grid[p.floor(ypos / flow_cell_size)][p.floor(xpos / flow_cell_size)];\n      }\n      function display_particles() {\n        p.strokeWeight(1);\n        // 255, 240, 220\n        p.stroke(color2Rgb(t.options.color, 0.05));\n        for (let i = 0; i < particles.length; i++) {\n          //p.stroke(particles[i].col)\n          //p.point(particles[i].pos.x, particles[i].pos.y)\n          if (p5.Vector.dist(particles[i].prev, particles[i].pos) < 10) p.line(particles[i].prev.x, particles[i].prev.y, particles[i].pos.x, particles[i].pos.y);\n        }\n      }\n      function display_flow() {\n        for (let i = 0; i < flow_grid.length; i++) {\n          for (let j = 0; j < flow_grid[i].length; j++) {\n            p.strokeWeight(1);\n            p.stroke(255, 0, 0);\n            p.noFill();\n            p.ellipse(j * flow_cell_size, i * flow_cell_size, 7, 7);\n            p.line(j * flow_cell_size, i * flow_cell_size, j * flow_cell_size + flow_grid[i][j].x * 50, i * flow_cell_size + flow_grid[i][j].y * 50);\n          }\n        }\n      }\n\n      // p.keyPressed = function() {\n      //   if (p.keyCode === 80) {\n      //     p.saveCanvas('landslide', 'jpeg')\n      //   }\n      // }\n\n      function mod(x, n) {\n        return (x % n + n) % n;\n      }\n    };\n    new p5(sketch);\n  }\n}\nEffect.initClass();\nexport default VANTA.register('TOPOLOGY', Effect);","map":{"version":3,"names":["P5Base","VANTA","color2Rgb","p5","window","Effect","initClass","prototype","defaultOptions","color","backgroundColor","constructor","userOptions","onInit","t","sketch","p","width","height","offset","flow_cell_size","noise_size","noise_radius","flow_width","flow_height","noise_grid","flow_grid","number_of_particles","particles","tick","setup","initP5","smooth","noStroke","init_particles","init_flow","draw","translate","update_particles","display_particles","i","r","random","q","push","prev","createVector","pos","vel","acc","col","seed","prt","flow","get_flow","x","y","mod","add","normalize","mult","row","j","calculate_flow","high_val","low_val","high_pos","low_pos","angle","TAU","cos","sin","val","noise","flow_angle","xpos","ypos","constrain","floor","strokeWeight","stroke","options","length","Vector","dist","line","display_flow","noFill","ellipse","n","register"],"sources":["/Users/rick/Desktop/CNKI/cnki_web/node_modules/vanta/src/vanta.topology.js"],"sourcesContent":["// Original effect by Kjetil Midtgarden Golid\r\n// https://github.com/kgolid/p5ycho/blob/master/topology/sketch.js\r\n\r\nimport P5Base, {VANTA} from './_p5Base.js'\r\nimport {color2Rgb} from './helpers.js'\r\n\r\nlet p5 = (typeof window == 'object') && window.p5\r\n\r\nclass Effect extends P5Base {\r\n  static initClass() {\r\n    this.prototype.p5 = true\r\n    this.prototype.defaultOptions = {\r\n      color: 0x89964e,\r\n      backgroundColor: 0x002222,\r\n    }\r\n  }\r\n  constructor(userOptions) {\r\n    p5 = userOptions.p5 || p5\r\n    super(userOptions)\r\n  }\r\n  onInit() {\r\n    const t = this\r\n\r\n    let sketch = function(p) {\r\n      let width = t.width\r\n      let height = t.height\r\n      let offset = 100\r\n\r\n      let flow_cell_size = 10\r\n\r\n      let noise_size = 0.003\r\n      let noise_radius = 0.1\r\n\r\n      let flow_width = (width + offset * 2) / flow_cell_size\r\n      let flow_height = (height + offset * 2) / flow_cell_size\r\n\r\n      let noise_grid = []\r\n      let flow_grid = []\r\n\r\n      let number_of_particles = 4500\r\n      let particles = []\r\n\r\n      let tick = 0\r\n      p.setup = function() {\r\n        t.initP5(p) // sets bg too\r\n        p.smooth()\r\n        p.noStroke()\r\n        //p.blendMode(p.OVERLAY)\r\n\r\n        init_particles()\r\n        init_flow()\r\n      }\r\n      p.draw = function() {\r\n        p.translate(-offset, -offset)\r\n        //display_flow()\r\n        update_particles()\r\n        display_particles()\r\n        tick += 0.002\r\n      }\r\n\r\n      function init_particles() {\r\n        for (let i = 0; i < number_of_particles; i++) {\r\n          let r = p.random(p.width + 2 * offset)\r\n          let q = p.random(p.height + 2 * offset)\r\n          particles.push({\r\n            prev: p.createVector(r, q),\r\n            pos: p.createVector(r, q),\r\n            vel: p.createVector(0, 0),\r\n            acc: p.createVector(0, 0),\r\n            col: p.random(255),\r\n            seed: i\r\n          })\r\n        }\r\n      }\r\n\r\n      function update_particles() {\r\n        for (let i = 0; i < number_of_particles; i++) {\r\n          let prt = particles[i]\r\n          let flow = get_flow(prt.pos.x, prt.pos.y)\r\n\r\n          prt.prev.x = prt.pos.x\r\n          prt.prev.y = prt.pos.y\r\n\r\n          prt.pos.x = mod(prt.pos.x + prt.vel.x, p.width + 2 * offset)\r\n          prt.pos.y = mod(prt.pos.y + prt.vel.y, p.height + 2 * offset)\r\n\r\n          prt.vel\r\n            .add(prt.acc)\r\n            .normalize()\r\n            .mult(2.2)\r\n\r\n          //prt.acc = p5.Vector.fromAngle(p.noise(prt.seed * 10, tick) * p.TAU).mult(0.01)\r\n          prt.acc = p.createVector(0, 0)\r\n          prt.acc.add(flow).mult(3)\r\n        }\r\n      }\r\n\r\n      function init_flow() {\r\n        for (let i = 0; i < flow_height; i++) {\r\n          let row = []\r\n          for (let j = 0; j < flow_width; j++) {\r\n            row.push(calculate_flow(j * noise_size, i * noise_size, noise_radius))\r\n          }\r\n          flow_grid.push(row)\r\n        }\r\n      }\r\n\r\n      function calculate_flow(x, y, r) {\r\n        //console.log(x,y)\r\n        let high_val = 0\r\n        let low_val = 1\r\n        let high_pos = p.createVector(0, 0)\r\n        let low_pos = p.createVector(0, 0)\r\n\r\n        for (let i = 0; i < 100; i++) {\r\n          let angle = i / 100 * p.TAU\r\n          let pos = p.createVector(x + p.cos(angle) * r, y + p.sin(angle) * r)\r\n          let val = p.noise(pos.x, pos.y)\r\n\r\n          if (val > high_val) {\r\n            high_val = val\r\n            high_pos.x = pos.x\r\n            high_pos.y = pos.y\r\n          }\r\n          if (val < low_val) {\r\n            low_val = val\r\n            low_pos.x = pos.x\r\n            low_pos.y = pos.y\r\n          }\r\n        }\r\n\r\n        let flow_angle = p.createVector(low_pos.x - high_pos.x, low_pos.y - high_pos.y)\r\n        flow_angle.normalize().mult(high_val - low_val)\r\n\r\n        return flow_angle\r\n      }\r\n\r\n      function get_flow(xpos, ypos) {\r\n        xpos = p.constrain(xpos, 0, p.width + offset * 2)\r\n        ypos = p.constrain(ypos, 0, p.height + offset * 2)\r\n        return flow_grid[p.floor(ypos / flow_cell_size)][p.floor(xpos / flow_cell_size)]\r\n      }\r\n\r\n      function display_particles() {\r\n        p.strokeWeight(1)\r\n        // 255, 240, 220\r\n        p.stroke(color2Rgb(t.options.color, 0.05))\r\n        for (let i = 0; i < particles.length; i++) {\r\n          //p.stroke(particles[i].col)\r\n          //p.point(particles[i].pos.x, particles[i].pos.y)\r\n          if (p5.Vector.dist(particles[i].prev, particles[i].pos) < 10)\r\n            p.line(particles[i].prev.x, particles[i].prev.y, particles[i].pos.x, particles[i].pos.y)\r\n        }\r\n      }\r\n\r\n      function display_flow() {\r\n        for (let i = 0; i < flow_grid.length; i++) {\r\n          for (let j = 0; j < flow_grid[i].length; j++) {\r\n            p.strokeWeight(1)\r\n            p.stroke(255, 0, 0)\r\n            p.noFill()\r\n            p.ellipse(j * flow_cell_size, i * flow_cell_size, 7, 7)\r\n            p.line(\r\n              j * flow_cell_size,\r\n              i * flow_cell_size,\r\n              j * flow_cell_size + flow_grid[i][j].x * 50,\r\n              i * flow_cell_size + flow_grid[i][j].y * 50\r\n            )\r\n          }\r\n        }\r\n      }\r\n\r\n      // p.keyPressed = function() {\r\n      //   if (p.keyCode === 80) {\r\n      //     p.saveCanvas('landslide', 'jpeg')\r\n      //   }\r\n      // }\r\n\r\n      function mod(x, n) {\r\n        return (x % n + n) % n\r\n      }\r\n    }\r\n    new p5(sketch)\r\n  }\r\n}\r\nEffect.initClass()\r\nexport default VANTA.register('TOPOLOGY', Effect)"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}